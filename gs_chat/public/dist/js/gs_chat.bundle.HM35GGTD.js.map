{
  "version": 3,
  "sources": ["../../../../../apps/gs_chat/gs_chat/public/js/slash_commands.js", "../../../../../apps/gs_chat/gs_chat/public/js/gs_chat.bundle.js"],
  "sourcesContent": ["// slash_commands.js - Entity selector approach\n\nexport class SlashCommandManager {\n    constructor(chatInput) {\n        this.chatInput = chatInput;\n        this.isActive = false;\n        this.dropdown = null;\n        this.currentDoctype = null;\n        this.setupEvents();\n    }\n\n    setupEvents() {\n        const me = this;\n        \n        // Listen for '/' key to activate entity selection\n        this.chatInput.on('input', function(e) {\n            const target = window.getSelection().focusNode;\n            const doctypeSelector = $(target).closest('.doctype-selector');\n            const documentSelector = $(target).closest('.document-selector');\n\n            if (doctypeSelector.length && me.dropdown) {\n                const filterText = doctypeSelector.text().trim().toLowerCase();\n                me.filterDropdown(filterText);\n            } else if (documentSelector.length && me.dropdown) {\n                const filterText = documentSelector.text().trim().toLowerCase();\n                me.filterDropdown(filterText);\n            }\n        });\n\n        this.chatInput.on('keydown', function(e) {\n            if (!me.isActive) {\n                // Only handle slash to activate when not active\n                if (e.key === '/' && !e.shiftKey && !e.ctrlKey) {\n                    e.preventDefault();\n                    me.createEntitySelector();\n                    me.showDoctypeDropdown();\n                }\n                return;\n            }\n            \n            // Handle keys when entity selector is active\n\n            switch (e.key) {\n                case 'Escape':\n                    e.preventDefault();\n                    me.hideDropdown();\n                    me.removeEntitySelector();\n                    break;\n                    \n                case 'Backspace':\n                    me.handleBackspace(e);\n                    break;\n                    \n                case 'ArrowUp':\n                case 'ArrowDown':\n                    if (me.dropdown) {\n                        e.preventDefault();\n                        me.navigateDropdown(e.key === 'ArrowDown' ? 'next' : 'prev');\n                    }\n                    break;\n                    \n                case 'Enter':\n                    if (me.dropdown) {\n                        e.preventDefault();\n                        me.selectActiveItem();\n                    }\n                    break;\n            }\n        });\n        \n        // Handle clicks outside the dropdown to close it\n        $(document).on('click', function(e) {\n            if (me.isActive && me.dropdown && !$(e.target).closest('.slash-command-dropdown, .entity-selector').length) {\n                me.hideDropdown();\n                me.removeEntitySelector();\n            }\n        });\n        \n        // Handle window resize or scroll\n        $(window).on('resize scroll', () => {\n            if (this.isActive && this.dropdown) {\n                this.positionDropdown();\n            }\n        });\n    }\n\n    handleBackspace(e) {\n        const selection = window.getSelection();\n        const node = selection.focusNode;\n        const offset = selection.anchorOffset;\n        \n        // Check if we're right after a completed entity (cursor at start of text node)\n        if (node.nodeType === Node.TEXT_NODE && offset === 0) {\n            const prevNode = node.previousSibling;\n            \n            // If previous node is a completed entity\n            if (prevNode && $(prevNode).hasClass('entity-selector') && $(prevNode).hasClass('complete-entity')) {\n                e.preventDefault();\n                \n                // Get the entity selector\n                const entitySelector = $(prevNode);\n                \n                // Remove complete-entity class\n                entitySelector.removeClass('complete-entity');\n                \n                // Find document selector (last editable part that was made non-editable)\n                const documentSelector = entitySelector.find('[contenteditable=\"false\"]').last();\n                \n                if (documentSelector.length) {\n                    // Make it editable again\n                    documentSelector.attr('contenteditable', 'true');\n                    documentSelector.addClass('document-selector');\n                    \n                    // Focus on it\n                    this.focusEntityPart(documentSelector[0]);\n                    \n                    // Set state for dropdown\n                    this.currentDoctype = entitySelector.attr('data-doctype');\n                    this.currentDoctypeSelected = true;\n                    this.isActive = true;\n                    \n                    // Show dropdown\n                    this.showDocumentDropdown(this.currentDoctype);\n                }\n                \n                return;\n            }\n        }\n        \n        // Case: we're inside a document selector and it's empty\n        const docSelector = $(node).closest('.document-selector');\n        if (docSelector.length && docSelector.text().trim() === '') {\n            e.preventDefault();\n            this.revertToDocTypeSelection(docSelector);\n            return;\n        }\n        \n        // Case: we're inside a doctype selector and it's empty\n        const dtSelector = $(node).closest('.doctype-selector');\n        if (dtSelector.length && dtSelector.text().trim() === '') {\n            e.preventDefault();\n            this.removeEntitySelector();\n            return;\n        }\n    }\n\n    revertToDocTypeSelection(docSelector) {\n        const entitySelector = docSelector.closest('.entity-selector');\n        \n        // Remove document part\n        entitySelector.find('.document-selector').remove();\n        entitySelector.find('.entity-separator').remove();\n        \n        // Make doctype editable again\n        const doctypeSelector = entitySelector.find('.selected-doctype');\n        doctypeSelector.attr('contenteditable', 'true');\n\n        // Focus and show dropdown\n        this.focusEntityPart(doctypeSelector[0]);\n        this.hideDropdown();\n        this.showDoctypeDropdown();\n        \n        // Reset state\n        this.currentDoctypeSelected = false;\n    }\n\n    selectActiveItem() {\n        const selectedItem = this.dropdown.find('.dropdown-item.active');\n        if (selectedItem.length) {\n            const value = selectedItem.data('value');\n            const label = selectedItem.text();\n            this.selectItem(\n                {value, label}, \n                this.currentDoctypeSelected ? 'document' : 'doctype'\n            );\n        }\n    }\n    \n    createEntitySelector() {\n        // Get cursor position\n        const selection = window.getSelection();\n        if (!selection.rangeCount) return;\n\n        const range = selection.getRangeAt(0);\n        \n        // Create entity selector container\n        const entitySelector = $('<span class=\"entity-selector\"></span>');\n        \n        // Create doctype selector\n        const doctypeSelector = $('<span class=\"entity-part doctype-selector\" contenteditable=\"true\" data-placeholder=\"type...\"></span>');\n        entitySelector.append(doctypeSelector);\n        \n        // Insert at cursor position\n        range.insertNode(entitySelector[0]);\n        \n        // Focus the doctype selector\n        this.focusEntityPart(doctypeSelector[0]);\n        \n        // Set active state\n        this.isActive = true;\n        this.currentDoctypeSelected = false;\n    }\n    \n    focusEntityPart(element) {\n        // Focus and set cursor at the end of the element\n        const range = document.createRange();\n        const selection = window.getSelection();\n        \n        range.selectNodeContents(element);\n        range.collapse(false); // collapse to end\n        \n        selection.removeAllRanges();\n        selection.addRange(range);\n        \n        element.focus();\n    }\n    \n    removeEntitySelector() {\n        // Remove the entity selector if present\n        this.chatInput.find('.entity-selector').remove();\n        this.isActive = false;\n    }\n\n    showDoctypeDropdown() {\n        const me = this;\n        \n        // Fetch available doctypes\n        frappe.call({\n            method: 'gs_chat.controllers.entity_creator.get_doctype_suggestions',\n            callback: function(r) {\n                if (r.message && r.message.length) {\n                    me.createDropdown(r.message, 'doctype');\n                } else {\n                    me.isActive = false;\n                    me.removeEntitySelector();\n                    frappe.show_alert({\n                        message: __('No accessible doctypes found'),\n                        indicator: 'red'\n                    });\n                }\n            }\n        });\n    }\n\n    createDropdown(items, type) {\n        // Remove existing dropdown if any\n        this.hideDropdown();\n        \n        // Store items for filtering\n        this.dropdownItems = items;\n        \n        // Create dropdown container\n        this.dropdown = $('<div class=\"slash-command-dropdown\"></div>');\n        \n        // Add items container\n        const itemsContainer = $('<div class=\"dropdown-items\"></div>');\n        \n        // Add items\n        items.forEach((item, index) => {\n            const itemElement = $(`<div class=\"dropdown-item\" data-value=\"${item.value}\">${item.label}</div>`);\n            \n            // Highlight first item\n            if (index === 0) {\n                itemElement.addClass('active');\n            }\n            \n            // Handle item click\n            itemElement.on('click', () => {\n                this.selectItem(item, type);\n            });\n            \n            itemsContainer.append(itemElement);\n        });\n        \n        this.dropdown.append(itemsContainer);\n        \n        // Append to body with fixed positioning\n        $('body').append(this.dropdown);\n        \n        // Position dropdown\n        this.positionDropdown();\n    }\n    \n    filterDropdown(filterText) {\n        if (!this.dropdown || !this.dropdownItems) return;\n        \n        const itemsContainer = this.dropdown.find('.dropdown-items');\n        itemsContainer.empty();\n        \n        // Filter items and rebuild list\n        const filteredItems = this.dropdownItems.filter(item => \n            item.label.toLowerCase().includes(filterText)\n        );\n        \n        if (filteredItems.length === 0) {\n            itemsContainer.append('<div class=\"dropdown-item no-results\">No matches found</div>');\n            return;\n        }\n        \n        filteredItems.forEach((item, index) => {\n            const itemElement = $(`<div class=\"dropdown-item\" data-value=\"${item.value}\">${item.label}</div>`);\n            \n            // Highlight first item\n            if (index === 0) {\n                itemElement.addClass('active');\n            }\n            \n            // Handle item click\n            itemElement.on('click', () => {\n                this.selectItem(item, this.currentDoctypeSelected ? 'document' : 'doctype');\n            });\n            \n            itemsContainer.append(itemElement);\n        });\n    }\n    \n    navigateDropdown(direction) {\n        if (!this.dropdown) return;\n        \n        const items = this.dropdown.find('.dropdown-item:not(.no-results)');\n        const activeItem = this.dropdown.find('.dropdown-item.active');\n        const currentIndex = items.index(activeItem);\n        \n        let newIndex;\n        if (direction === 'next') {\n            newIndex = (currentIndex + 1) % items.length;\n        } else {\n            newIndex = (currentIndex - 1 + items.length) % items.length;\n        }\n        \n        activeItem.removeClass('active');\n        items.eq(newIndex).addClass('active');\n        this.scrollToItem(items.eq(newIndex));\n    }\n\n    positionDropdown() {\n        if (!this.dropdown) return;\n        \n        // Get position from the current entity selector\n        const entitySelector = this.chatInput.find('.entity-selector');\n        if (!entitySelector.length) {\n            this.hideDropdown();\n            return;\n        }\n        \n        const position = entitySelector.offset();\n        const entityHeight = entitySelector.outerHeight();\n        const dropdownHeight = this.dropdown.outerHeight();\n        const windowHeight = $(window).height();\n        \n        // Calculate available space below and above\n        const spaceBelow = windowHeight - (position.top - window.scrollY + entityHeight);\n        const spaceAbove = position.top - window.scrollY;\n        \n        // Decide whether to show above or below\n        const showAbove = (dropdownHeight > spaceBelow) && (spaceAbove > spaceBelow);\n        \n        // Position dropdown\n        if (showAbove) {\n            this.dropdown.css({\n                position: 'fixed',\n                bottom: windowHeight - position.top + 5,\n                left: position.left,\n                top: 'auto',\n                zIndex: 9999\n            });\n        } else {\n            this.dropdown.css({\n                position: 'fixed',\n                top: position.top + entityHeight + 5,\n                left: position.left,\n                bottom: 'auto',\n                zIndex: 9999\n            });\n        }\n    }\n\n    scrollToItem(item) {\n        const container = item.parent();\n        const containerHeight = container.height();\n        const itemTop = item.position().top;\n        const itemHeight = item.outerHeight();\n        \n        if (itemTop < 0) {\n            container.scrollTop(container.scrollTop() + itemTop);\n        } else if (itemTop + itemHeight > containerHeight) {\n            container.scrollTop(container.scrollTop() + itemTop + itemHeight - containerHeight);\n        }\n    }\n\n    selectItem(item, type) {\n        if (type === 'doctype') {\n            // Store current doctype for later\n            this.currentDoctype = item.value;\n            this.currentDoctypeSelected = true;\n            \n            // Update the current entity selector with the selected doctype\n            const entitySelector = this.chatInput.find('.entity-selector');\n            const doctypeSelector = entitySelector.find('.doctype-selector');\n            \n            // Set doctype text and make it non-editable\n            doctypeSelector.text(item.label);\n            doctypeSelector.attr('contenteditable', 'false');\n            \n            // Add slash separator\n            entitySelector.append('<span class=\"entity-separator\">/</span>');\n            \n            // Add document selector\n            const documentSelector = $('<span class=\"entity-part document-selector\" contenteditable=\"true\" data-placeholder=\"type...\"></span>');\n            entitySelector.append(documentSelector);\n            \n            // Focus the document selector\n            this.focusEntityPart(documentSelector[0]);\n            \n            // Set up input handling in the document selector\n            documentSelector.on('input', () => {\n                // Filter the dropdown based on input\n                if (this.dropdown) {\n                    const filterText = documentSelector.text().trim().toLowerCase();\n                    this.filterDropdown(filterText);\n                }\n            });\n            \n            // Show document dropdown\n            this.hideDropdown();\n            this.showDocumentDropdown(item.value);\n        } else {\n            // Update the current entity selector with the selected document\n            const entitySelector = this.chatInput.find('.entity-selector');\n            const documentSelector = entitySelector.find('.document-selector');\n            \n            // Set document text and make it non-editable\n            documentSelector.text(item.label);\n            documentSelector.attr('contenteditable', 'false');\n            \n            // Add the doctype and document information as data attributes for later retrieval\n            entitySelector.attr('data-doctype', this.currentDoctype);\n            entitySelector.attr('data-document', item.value);\n            entitySelector.addClass('complete-entity');\n\n            // Hide dropdown and reset state\n            this.hideDropdown();\n            this.isActive = false;\n\n            const spaceNode = document.createTextNode('\\u00A0'); // Non-breaking space\n            entitySelector.after(spaceNode);\n            \n            // Set cursor after entity selector\n            const selection = window.getSelection();\n            const range = document.createRange();\n            range.setStartAfter(spaceNode);\n            range.setEndAfter(spaceNode);\n            selection.removeAllRanges();\n            selection.addRange(range);\n            \n            // Focus back on main input\n            this.chatInput.focus();\n        }\n    }\n\n    showDocumentDropdown(doctype) {\n        const me = this;\n        \n        // Fetch documents for the selected doctype\n        frappe.call({\n            method: 'gs_chat.controllers.entity_creator.get_document_suggestions',\n            args: {\n                doctype: doctype,\n                partial_input: ''\n            },\n            callback: function(r) {\n                if (r.message && r.message.length) {\n                    me.createDropdown(r.message, 'document');\n                } else {\n                    me.isActive = false;\n                    frappe.show_alert({\n                        message: __('No documents found for {0}', [doctype]),\n                        indicator: 'orange'\n                    });\n                }\n            }\n        });\n    }\n\n    hideDropdown() {\n        if (this.dropdown) {\n            this.dropdown.remove();\n            this.dropdown = null;\n        }\n    }\n\n    // Method to get all entity references from the input for context creation\n    getEntityReferences() {\n        const references = [];\n        \n        this.chatInput.find('.entity-selector').each(function() {\n            const doctype = $(this).attr('data-doctype');\n            const document = $(this).attr('data-document');\n            \n            if (doctype && document) {\n                references.push({\n                    doctype: doctype,\n                    document: document\n                });\n            }\n        });\n        \n        return references;\n    }\n}", "frappe.provide(\"gs_chat\");\n\nimport { SlashCommandManager } from \"./slash_commands.js\"\n\ngs_chat.ChatbotWidget = class {\n    constructor() {\n        this.messages = [];\n        this.isOpen = false;\n        this.slashCommands = null;\n        this.conversations = [];\n        this.currentConversationId = null;\n        this.sidebarOpen = false;\n        this.setupIcon();\n        this.fetchConversations();\n    }\n\n    setupIcon() {\n        const $chatbotIcon = $(`\n            <li class=\"nav-item dropdown dropdown-notifications dropdown-mobile chatbot-icon-open\">\n                <a class=\"nav-link\" data-toggle=\"dropdown\" aria-expanded=\"false\" \n                   title=\"Growth Assistant\" href=\"#\" onclick=\"return false;\">\n                    ${frappe.utils.icon(\"chatbot\")}\n                </a>\n            </li>\n        `)\n        $('.dropdown-help').before($chatbotIcon);\n\n        $chatbotIcon.on('click', () => {\n            this.toggleChatbot();\n            return false;\n        });\n    }\n\n    toggleChatbot() {\n        if (this.isOpen) {\n            this.closeChat();\n        } else {\n            this.openChat();\n        }\n    }\n    \n    openChat() {\n        // Create the dialog if it doesn't exist\n        if (!this.chatDialog) {\n            this.createDialog();\n            this.setupResizeHandle();\n            this.loadSavedDimensions();\n            this.setupEvents();\n            this.renderConversationList();\n\n            // Initialize slash commands\n            this.slashCommands = new SlashCommandManager(this.chatInput);\n        }\n\n        // Show the dialog\n        this.chatDialog.addClass(\"open\");\n        this.chatDialog.removeClass(\"minimized\");\n\n        this.isOpen = true;\n\n        // Focus on input\n        this.chatInput.focus();\n\n        // Add welcome message if this is the first time and no conversation is loaded\n        if (this.messages.length === 0 && !this.currentConversationId) {\n            this.startNewConversation();\n        }\n\n        // Dispatch event that chatbot is loaded (for slash commands)\n        $(document).trigger('growth_chatbot_loaded');\n    }\n\n    createDialog() {\n        this.chatDialog = $(`\n            <div class=\"modal-content gs-chatbot-widget sidebar-hidden\">\n                <div class=\"chat-sidebar\">\n                    <div class=\"conversation-list\">\n                        <div class=\"conversation-item new-chat-item\">\n                            <div class=\"conversation-title\"><i class=\"fa fa-plus\"></i> New Chat</div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"chat-main\">\n                    <div class=\"modal-header\">\n                        <div class=\"fill-width flex title-section\">\n                            <button class=\"btn btn-sm toggle-sidebar-button\">\n                                ${frappe.utils.icon(\"list\")}\n                            </button>\n                            <span class=\"indicator hidden\"></span>\n                            <h4 class=\"modal-title\">G'Bot</h4>\n                        </div>\n                        <div class=\"modal-actions\">\n                            <button class=\"btn btn-sm action-button\" data-action=\"refresh\" title=\"Reset Conversation\">\n                                ${frappe.utils.icon(\"refresh\")}\n                            </button>\n                            <button class=\"btn btn-modal-minimize action-button btn-link\" data-action=\"minimize\" title=\"Minimize\">\n                                ${frappe.utils.icon(\"collapse\")}\n                            </button>\n                            <button class=\"btn btn-modal-close btn-link action-button\" data-action=\"close\" title=\"Close\">\n                                ${frappe.utils.icon(\"close-alt\")}\n                            </button>\n                        </div>\n                    </div>\n                    <div class=\"modal-body chat-body ui-front\">\n                        <div class=\"chatbot-messages\"></div>\n                        <div class=\"typing-indicator d-none\">\n                            <span></span><span></span><span></span>\n                        </div>\n                    </div>\n                    <div class=\"chat-footer\">\n                        <div class=\"chat-input-container\">\n                            <span class=\"chat-input\" data-placeholder=\"Ask anything...\" contenteditable=\"true\" enterkeyhint=\"enter\" tabindex=\"0\"></span>\n                            <button class=\"btn btn-primary btn-sm send-button\">\n                                <i class=\"fa fa-paper-plane\"></i>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"resize-handle\"></div>\n            </div>\n            `)\n\n        $('body').append(this.chatDialog);\n    }\n\n    setupEvents() {\n        const me = this;\n\n        // Cache elements\n        this.chatBody = this.chatDialog.find('.chat-body');\n        this.messagesContainer = this.chatDialog.find('.chatbot-messages');\n        this.chatInput = this.chatDialog.find('.chat-input');\n        this.typingIndicator = this.chatDialog.find('.typing-indicator');\n        this.sendButton = this.chatDialog.find('.send-button');\n        this.conversationList = this.chatDialog.find('.conversation-list');\n        this.newChatItem = this.chatDialog.find('.new-chat-item');\n        this.toggleSidebarButton = this.chatDialog.find('.toggle-sidebar-button');\n\n        // Setup keyboard shortcut (Ctrl+Enter to send)\n        this.chatInput.on('keydown', function(e) {\n            if (e.key === 'Enter' && !e.shiftKey && !e.ctrlKey && !e.metaKey && !me.slashCommands.isActive) {\n                e.preventDefault();\n                me.sendMessage();\n                return false;\n            }\n        });\n\n        this.sendButton.on('click', function() {\n            me.sendMessage();\n        });\n\n        this.chatDialog.find('.action-button').on('click', function(e) {\n            const action = $(e.currentTarget).data('action');\n            \n            if (action === 'refresh') {\n                me.resetConversation();\n            } else if (action === 'minimize') {\n                me.minimizeChat();\n            } else if (action === 'close') {\n                me.closeChat();\n            }\n        });\n        \n        // New chat item\n        this.newChatItem.on('click', function() {\n            me.startNewConversation();\n        });\n        \n        // Toggle sidebar button\n        this.toggleSidebarButton.on('click', function() {\n            me.toggleSidebar();\n        });\n\n        this.fixPlaceholder();\n    }\n    \n    toggleSidebar() {\n        this.chatDialog.toggleClass('sidebar-hidden');\n        this.sidebarOpen = !this.chatDialog.hasClass('sidebar-hidden');\n        \n        // Save sidebar state\n        if (localStorage) {\n            localStorage.setItem('chatbot-sidebar-open', this.sidebarOpen ? '1' : '0');\n        }\n    }\n    \n    fetchConversations() {\n        const me = this;\n        \n        // Call API to get conversations\n        frappe.call({\n            method: 'gs_chat.controllers.chat.get_conversations',\n            callback: (r) => {\n                if (r.message && r.message.success) {\n                    me.conversations = r.message.conversations || [];\n                } else {\n                    console.error(\"Failed to fetch conversations:\", r.message);\n                }\n            }\n        });\n    }\n    \n    renderConversationList() {\n        const me = this;\n        \n        // Clear all except the new chat item\n        this.conversationList.find('.conversation-item:not(.new-chat-item)').remove();\n        \n        // Always keep the New Chat item at the top\n        if (!this.conversationList.find('.new-chat-item').length) {\n            const $newChatItem = $(`\n                <div class=\"conversation-item new-chat-item\">\n                    <div class=\"conversation-title\"><i class=\"fa fa-plus\"></i> New Chat</div>\n                </div>\n            `);\n            \n            $newChatItem.on('click', function() {\n                me.startNewConversation();\n            });\n            \n            this.conversationList.prepend($newChatItem);\n            this.newChatItem = $newChatItem;\n        }\n        \n        if (this.conversations.length === 0) {\n            this.conversationList.append(\n                `<div class=\"empty-conversation-placeholder\">No previous conversations</div>`\n            );\n            return;\n        }\n        \n        // Sort conversations by date (newest first)\n        this.conversations.sort((a, b) => {\n            return new Date(b.last_updated) - new Date(a.last_updated);\n        });\n        \n        // Create element for each conversation\n        this.conversations.forEach(conv => {\n            const formattedDate = frappe.datetime.prettyDate(conv.last_updated);\n            const title = conv.title || 'Conversation ' + frappe.datetime.str_to_user(conv.creation).slice(0, 10);\n            \n            const $item = $(`\n                <div class=\"conversation-item\" data-conversation-id=\"${conv.name}\">\n                    <div class=\"conversation-title\">${frappe.utils.escape_html(title)}</div>\n                    <div class=\"conversation-date\">${formattedDate}</div>\n                </div>\n            `);\n            \n            // Mark current conversation as active\n            if (conv.name === me.currentConversationId) {\n                $item.addClass('active');\n            }\n            \n            // Click handler\n            $item.on('click', function() {\n                const convId = $(this).data('conversation-id');\n                me.loadConversation(convId);\n                \n                // Update active state\n                me.conversationList.find('.conversation-item').removeClass('active');\n                $(this).addClass('active');\n            });\n            \n            // Insert after the new chat item\n            this.newChatItem.after($item);\n        });\n    }\n    \n    startNewConversation() {\n        // Clear chat UI\n        this.messagesContainer.empty();\n        this.messages = [];\n        \n        // Reset the conversation ID - a new one will be created when sending the first message\n        this.currentConversationId = null;\n        \n        // Mark all conversation items as inactive\n        this.conversationList.find('.conversation-item').removeClass('active');\n        \n        // Mark the new chat item as active to indicate we're in a new conversation\n        this.newChatItem.addClass('active');\n        \n        // Add welcome message\n        this.addBotMessage(\"Hello! I'm your Growth Assistant. You can ask me questions about ERP features or your data. Try typing `/` to access specific documents.\", false, false);\n        \n        // Focus on the input\n        this.chatInput.focus();\n    }\n\n    loadConversation(conversationId) {\n        const me = this;\n        \n        // Show loading indicator\n        me.chatDialog.addClass('loading-conversation');\n        \n        me.messagesContainer.html('<div class=\"text-center p-4\">Loading conversation...</div>');\n\n        // Call API to get conversation messages\n        frappe.call({\n            method: 'gs_chat.controllers.chat.get_conversation_messages',\n            args: {\n                conversation_id: conversationId\n            },\n            callback: (r) => {\n                if (r.message && r.message.success) {\n                    // Clear current messages\n                    me.messagesContainer.empty();\n                    me.messages = [];\n                    \n                    // Set current conversation ID\n                    me.currentConversationId = conversationId;\n                    \n                    // Load messages\n                    const messages = r.message.messages || [];\n                    \n                    if (messages.length === 0) {\n                        me.addBotMessage(\"This conversation is empty. You can start by asking a question.\");\n                    } else {\n                        // Add each message to UI\n                        messages.forEach(msg => {\n                            if (msg.message_type === 'user') {\n                                me.addUserMessage(msg.content, false);\n                            } else if (msg.message_type === 'bot') {\n                                me.addBotMessage(msg.content, msg.is_error, false);\n                            }\n                        });\n                    }\n                    \n                    // Scroll to bottom\n                    me.scrollToBottom();\n\n                    setTimeout(() => {\n                        me.chatDialog.removeClass('loading-conversation');\n                    }, 50);\n                } else {\n                    console.error(\"Failed to load conversation:\", r.message);\n                    me.messagesContainer.html(\n                        '<div class=\"text-center p-4 text-danger\">Failed to load conversation</div>'\n                    );\n\n                    me.chatDialog.removeClass('loading-conversation');\n                }\n            }\n        });\n    }\n\n    closeChat() {\n        if (this.chatDialog) {\n            this.chatDialog.removeClass(\"open\");\n        }\n        this.isOpen = false;\n    }\n\n    minimizeChat() {\n        this.chatDialog.toggleClass(\"minimized\");\n    }\n\n    getQueryText() {\n        // Get all text nodes and combine them with proper line breaks\n        const textParts = [];\n        const collectTextFromNode = (node) => {\n            if (node.nodeType === Node.TEXT_NODE) {\n                textParts.push(node.textContent);\n            } else if (node.nodeType === Node.ELEMENT_NODE) {\n                // For entity selector spans, use their text content\n                if (node.classList.contains('entity-selector')) {\n                    const doctype = node.getAttribute('data-doctype');\n                    const document = node.getAttribute('data-document');\n                    if (doctype && document) {\n                        textParts.push(`/${doctype}/${document}`);\n                    }\n                } \n                // For line breaks, add a newline character\n                else if (node.tagName === 'BR') {\n                    textParts.push('\\n');\n                } \n                // For paragraphs or divs, add a newline after their content\n                else if (node.tagName === 'P' || node.tagName === 'DIV') {\n                    // Recursively process children\n                    Array.from(node.childNodes).forEach(child => {\n                        collectTextFromNode(child);\n                    });\n                    // Add a newline unless this is the last paragraph\n                    if (node.nextSibling) {\n                        textParts.push('\\n');\n                    }\n                } \n                // Process other elements recursively\n                else {\n                    Array.from(node.childNodes).forEach(child => {\n                        collectTextFromNode(child);\n                    });\n                }\n            }\n        };\n\n        // Start collecting from all direct children of the chat input\n        Array.from(this.chatInput[0].childNodes).forEach(node => {\n            collectTextFromNode(node);\n        });\n\n        // Join all text parts into a single string\n        return textParts.join('');\n    }\n\n    sendMessage() {\n        // Get all text from the contenteditable div\n        const query = this.getQueryText().trim();\n\n        if (!query) {\n            return;\n        }\n\n        const references = this.slashCommands.getEntityReferences();\n\n        // Add user message to chat\n        this.addUserMessage(query, false); // Don't save to server yet\n        \n        // Clear input - for contenteditable\n        this.chatInput.html('');\n\n        // Show typing indicator\n        this.showTypingIndicator();\n        \n        // If this is potentially a new conversation, update the UI accordingly\n        let $pendingItem = null;\n        if (!this.currentConversationId) {\n            // We need to visually indicate a new conversation is being created\n            // Create a temporary pending conversation UI element\n            $pendingItem = $(`\n                <div class=\"conversation-item active\" data-conversation-id=\"pending\">\n                    <div class=\"conversation-title\"><i class=\"fa fa-circle-o-notch fa-spin\"></i> ${query.substring(0, 20)}${query.length > 20 ? '...' : ''}</div>\n                </div>\n            `);\n            \n            // Insert after the new chat button and mark new chat item as inactive\n            this.newChatItem.removeClass('active').after($pendingItem);\n        }\n        \n        // Send to server with a single endpoint that handles both new and existing conversations\n        frappe.call({\n            method: 'gs_chat.controllers.chat.process_message',\n            args: {\n                query: query,\n                references: references,\n                conversation_id: this.currentConversationId || null\n            },\n            callback: (r) => {\n                // Hide typing indicator\n                this.hideTypingIndicator();\n                \n                if (r.message && r.message.success) {\n                    // If a new conversation was created, update the ID\n                    if (r.message.conversation_id != this.currentConversationId) {\n                        this.currentConversationId = r.message.conversation_id;\n\n                        // Remove the pending item (will be replaced during refresh)\n                        if ($pendingItem) {\n                            $pendingItem.remove();\n                        }\n                        \n                        // Refresh conversation list to show the new one\n                        this.fetchConversations();\n                    }\n                    \n                    // Add bot response\n                    const messageEl = this.addBotMessage(r.message.response, false, false); // Already saved on server\n                    \n                    // Add feedback buttons\n                    this.addFeedbackButtons(messageEl, r.message.response);\n                    \n                    // Scroll to bottom\n                    this.scrollToBottom();\n                } else {\n                    // Show error message\n                    this.addBotMessage(\n                        r.message && r.message.error \n                            ? r.message.error \n                            : \"Sorry, I encountered an error. Please try again.\",\n                        true,\n                        false\n                    );\n                    \n                    // If this was a new conversation attempt, clean up\n                    if (!this.currentConversationId && $pendingItem) {\n                        $pendingItem.remove();\n                        this.newChatItem.addClass('active');\n                    }\n                }\n            },\n            error: () => {\n                // Hide typing indicator\n                this.hideTypingIndicator();\n                \n                // Show error message\n                this.addBotMessage(\n                    \"Sorry, I couldn't connect to the server. Please check your connection and try again.\",\n                    true,\n                    false\n                );\n                \n                // If this was a new conversation attempt, clean up\n                if (!this.currentConversationId && $pendingItem) {\n                    $pendingItem.remove();\n                    this.newChatItem.addClass('active');\n                }\n            }\n        });\n    }\n\n    addUserMessage(content, saveToServer = true) {\n        const messageEl = $(`\n            <div class=\"chat-message user-message\">\n                <div class=\"chat-bubble\">\n                    ${frappe.markdown(content)}\n                </div>\n            </div>\n        `);\n        \n        this.messagesContainer.append(messageEl);\n        this.scrollToBottom();\n        \n        // Add to messages array\n        this.messages.push({\n            type: 'user',\n            content: content\n        });\n        \n        // Save to server if needed and we have a conversation ID\n        if (saveToServer && this.currentConversationId) {\n            frappe.call({\n                method: 'gs_chat.controllers.chat.save_message',\n                args: {\n                    conversation_id: this.currentConversationId,\n                    message_type: 'user',\n                    content: content\n                },\n                callback: (r) => {\n                    if (!r.message || !r.message.success) {\n                        console.error(\"Failed to save user message:\", r.message);\n                    }\n                }\n            });\n        }\n    }\n\n    addBotMessage(content, isError = false, saveToServer = true) {\n        const errorClass = isError ? 'error' : '';\n        \n        const messageEl = $(`\n            <div class=\"chat-message bot-message\">\n                <div class=\"chat-bubble ${errorClass}\">\n                    ${frappe.markdown(content)}\n                </div>\n            </div>\n        `);\n        \n        this.messagesContainer.append(messageEl);\n        \n        // Add to messages array\n        this.messages.push({\n            type: 'bot',\n            content: content,\n            isError: isError\n        });\n        \n        // Save to server if needed and we have a conversation ID\n        if (saveToServer && this.currentConversationId) {\n            frappe.call({\n                method: 'gs_chat.controllers.chat.save_message',\n                args: {\n                    conversation_id: this.currentConversationId,\n                    message_type: 'bot',\n                    content: content,\n                    is_error: isError ? 1 : 0\n                },\n                callback: (r) => {\n                    if (!r.message || !r.message.success) {\n                        console.error(\"Failed to save bot message:\", r.message);\n                    }\n                }\n            });\n        }\n        \n        return messageEl;\n    }\n\n    addFeedbackButtons(messageEl, response) {\n        const feedbackEl = $(`\n            <div class=\"message-feedback\">\n                <span>${__('Was this helpful?')}</span>\n                <button class=\"btn btn-xs btn-default feedback-button\" data-feedback=\"positive\">\n                    <i class=\"fa fa-thumbs-up\"></i>\n                </button>\n                <button class=\"btn btn-xs btn-default feedback-button\" data-feedback=\"negative\">\n                    <i class=\"fa fa-thumbs-down\"></i>\n                </button>\n            </div>\n        `);\n        \n        messageEl.append(feedbackEl);\n        \n        // Handle feedback clicks\n        feedbackEl.find('.feedback-button').on('click', (e) => {\n            const feedback = $(e.currentTarget).data('feedback');\n            \n            if (feedback === 'positive') {\n                this.submitFeedback(response, 'Positive');\n                feedbackEl.html(`<span class=\"text-success\">${__('Thanks for your feedback!')}</span>`);\n            } else {\n                this.showFeedbackForm(feedbackEl, response);\n            }\n        });\n    }\n\n    showFeedbackForm(feedbackEl, response) {\n        // Use Frappe's dialog\n        const dialog = new frappe.ui.Dialog({\n            title: __('Provide Feedback'),\n            fields: [\n                {\n                    fieldname: 'feedback_comment',\n                    fieldtype: 'Small Text',\n                    label: __('What was wrong with this response?'),\n                    reqd: true\n                }\n            ],\n            primary_action_label: __('Submit'),\n            primary_action: (values) => {\n                this.submitFeedback(response, 'Negative', values.feedback_comment);\n                feedbackEl.html(`<span class=\"text-success\">${__('Thanks for your feedback!')}</span>`);\n                dialog.hide();\n            }\n        });\n        \n        dialog.show();\n    }\n\n    submitFeedback(response, feedback, comment = null) {\n        // Find the interaction ID if available\n        // For simplicity, we'll create a unique ID here\n        const interactionId = frappe.utils.get_random(10);\n        \n        frappe.call({\n            method: 'erpnext_chatbot.api.llm_interface.provide_feedback',\n            args: {\n                interaction_id: interactionId,\n                feedback: feedback,\n                comment: comment\n            },\n            callback: (r) => {\n                if (!r.message || !r.message.success) {\n                    console.error(\"Failed to submit feedback:\", r.message);\n                }\n            }\n        });\n    }\n\n    resetConversation() {\n        frappe.confirm(\n            __('This will clear your conversation history. Continue?'),\n            () => {\n                if (this.currentConversationId) {\n                    // Clear chat UI\n                    this.messagesContainer.empty();\n                    this.messages = [];\n                    \n                    // Add welcome message\n                    this.addBotMessage(\"Hello! I'm your Growth Assistant. You can ask me questions about ERP features or your data. Try typing `/` to access specific documents.\");\n    \n                    // Reset conversation on server\n                    frappe.call({\n                        method: 'gs_chat.controllers.chat.reset_conversation',\n                        args: {\n                            conversation_id: this.currentConversationId\n                        },\n                        callback: (r) => {\n                            if (r.message && r.message.success) {\n                                // Refresh conversation list\n                                this.fetchConversations();\n                            } else {\n                                console.error(\"Failed to reset conversation:\", r.message);\n                            }\n                        }\n                    });\n                } else {\n                    // If no conversation, just start a new one\n                    this.startNewConversation();\n                }\n            }\n        );\n    }\n\n    fixPlaceholder() {\n        const input = this.chatInput;\n        \n        // Function to check if content is effectively empty\n        function isEffectivelyEmpty(element) {\n            // Check if there's only whitespace or only <br> elements\n            const clone = element.clone();\n            clone.find('br').remove();\n            return clone.html().trim() === '';\n        }\n\n        // Handle input events\n        input.on('input focus blur', function() {\n            const isEmpty = isEffectivelyEmpty($(this));\n\n            $(this).toggleClass('effectively-empty', isEmpty);\n        });\n        \n        // Initial state\n        input.trigger('blur');\n    }\n\n    showTypingIndicator() {\n        this.typingIndicator.removeClass('d-none');\n    }\n\n    hideTypingIndicator() {\n        this.typingIndicator.addClass('d-none');\n    }\n\n    scrollToBottom() {\n        const messagesContainer = this.chatDialog.find('.chatbot-messages')[0];\n        if (messagesContainer) {\n            messagesContainer.scrollTop = messagesContainer.scrollHeight;\n        }\n    }\n\n    setupResizeHandle() {\n        const me = this;\n        let startX, startY, startWidth, startHeight;\n        const handle = this.chatDialog.find('.resize-handle');\n\n        handle.on('mousedown', function(e) {\n            e.preventDefault();\n            \n            // Get initial positions\n            startX = e.clientX;\n            startY = e.clientY;\n            startWidth = me.chatDialog.outerWidth();\n            startHeight = me.chatDialog.outerHeight();\n            \n            // Add event listeners for mouse movement and release\n            $(document).on('mousemove.chatbot-resize', onMouseMove);\n            $(document).on('mouseup.chatbot-resize', onMouseUp);\n        });\n        \n        function onMouseMove(e) {\n            // Calculate new dimensions\n            const newWidth = startWidth + (startX - e.clientX);\n            const newHeight = startHeight + (startY - e.clientY);\n\n            // Apply minimum size constraints\n            const width = Math.max(550, newWidth); // Minimum width 550px (increased to accommodate sidebar)\n            const height = Math.max(350, newHeight); // Minimum height 350px\n            \n            // Apply new dimensions\n            me.chatDialog.css({\n                width: width + 'px',\n                height: height + 'px'\n            });\n\n            // Store dimensions for persistence (optional)\n            if (localStorage) {\n                localStorage.setItem('chatbot-width', width);\n                localStorage.setItem('chatbot-height', height);\n            }\n            \n        }\n        \n        function onMouseUp() {\n            // Remove event listeners when done resizing\n            $(document).off('mousemove.chatbot-resize');\n            $(document).off('mouseup.chatbot-resize');\n\n            // Scroll to bottom to keep the view on new messages\n            me.scrollToBottom();\n        }\n    }\n\n    // Add method to load saved dimensions\n    loadSavedDimensions() {\n        if (localStorage) {\n            const width = localStorage.getItem('chatbot-width');\n            const height = localStorage.getItem('chatbot-height');\n            \n            if (width && height) {\n                this.chatDialog.css({\n                    width: width + 'px',\n                    height: height + 'px'\n                });\n            } else {\n                // Set default size if not saved previously (larger to accommodate sidebar)\n                this.chatDialog.css({\n                    width: '750px',\n                    height: '500px'\n                });\n            }\n            \n            // Load sidebar state\n            const sidebarOpen = localStorage.getItem('chatbot-sidebar-open');\n            if (sidebarOpen === '0') {\n                this.chatDialog.addClass('sidebar-hidden');\n                this.sidebarOpen = false;\n            } else {\n                this.sidebarOpen = true;\n            }\n        }\n    }\n};\n\n$(document).ready(function() {\n    frappe.after_ajax(() => {\n        if (frappe.session.user == \"Administrator\")\n        gs_chat.instance = new gs_chat.ChatbotWidget();\n    });\n});"],
  "mappings": "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",
  "names": ["document", "document"]
}
