{
  "version": 3,
  "sources": ["../../../../../apps/gs_chat/gs_chat/public/js/slash_commands.js", "../../../../../apps/gs_chat/gs_chat/public/js/voice_input.js", "../../../../../apps/gs_chat/gs_chat/public/js/gs_chat.bundle.js"],
  "sourcesContent": ["// slash_commands.js - Entity selector approach\n\nexport class SlashCommandManager {\n    constructor(chatInput) {\n        this.chatInput = chatInput;\n        this.isActive = false;\n        this.dropdown = null;\n        this.currentDoctype = null;\n        this.setupEvents();\n    }\n\n    setupEvents() {\n        const me = this;\n        \n        // Listen for '/' key to activate entity selection\n        this.chatInput.on('input', function(e) {\n            const target = window.getSelection().focusNode;\n            const doctypeSelector = $(target).closest('.doctype-selector');\n            const documentSelector = $(target).closest('.document-selector');\n\n            if (doctypeSelector.length && me.dropdown) {\n                const filterText = doctypeSelector.text().trim().toLowerCase();\n                me.filterDropdown(filterText);\n            } else if (documentSelector.length && me.dropdown) {\n                const filterText = documentSelector.text().trim().toLowerCase();\n                me.filterDropdown(filterText);\n            }\n        });\n\n        this.chatInput.on('keydown', function(e) {\n            if (!me.isActive) {\n                // Only handle slash to activate when not active\n                if (e.key === '/' && !e.shiftKey && !e.ctrlKey) {\n                    e.preventDefault();\n                    me.createEntitySelector();\n                    me.showDoctypeDropdown();\n                }\n                return;\n            }\n            \n            // Handle keys when entity selector is active\n\n            switch (e.key) {\n                case 'Escape':\n                    e.preventDefault();\n                    me.hideDropdown();\n                    me.removeEntitySelector();\n                    break;\n                    \n                case 'Backspace':\n                    me.handleBackspace(e);\n                    break;\n                    \n                case 'ArrowUp':\n                case 'ArrowDown':\n                    if (me.dropdown) {\n                        e.preventDefault();\n                        me.navigateDropdown(e.key === 'ArrowDown' ? 'next' : 'prev');\n                    }\n                    break;\n                    \n                case 'Enter':\n                    if (me.dropdown) {\n                        e.preventDefault();\n                        me.selectActiveItem();\n                    }\n                    break;\n            }\n        });\n        \n        // Handle clicks outside the dropdown to close it\n        $(document).on('click', function(e) {\n            if (me.isActive && me.dropdown && !$(e.target).closest('.slash-command-dropdown, .entity-selector').length) {\n                me.hideDropdown();\n                me.removeEntitySelector();\n            }\n        });\n        \n        // Handle window resize or scroll\n        $(window).on('resize scroll', () => {\n            if (this.isActive && this.dropdown) {\n                this.positionDropdown();\n            }\n        });\n    }\n\n    handleBackspace(e) {\n        const selection = window.getSelection();\n        const node = selection.focusNode;\n        const offset = selection.anchorOffset;\n        \n        // Check if we're right after a completed entity (cursor at start of text node)\n        if (node.nodeType === Node.TEXT_NODE && offset === 0) {\n            const prevNode = node.previousSibling;\n            \n            // If previous node is a completed entity\n            if (prevNode && $(prevNode).hasClass('entity-selector') && $(prevNode).hasClass('complete-entity')) {\n                e.preventDefault();\n                \n                // Get the entity selector\n                const entitySelector = $(prevNode);\n                \n                // Remove complete-entity class\n                entitySelector.removeClass('complete-entity');\n                \n                // Find document selector (last editable part that was made non-editable)\n                const documentSelector = entitySelector.find('[contenteditable=\"false\"]').last();\n                \n                if (documentSelector.length) {\n                    // Make it editable again\n                    documentSelector.attr('contenteditable', 'true');\n                    documentSelector.addClass('document-selector');\n                    \n                    // Focus on it\n                    this.focusEntityPart(documentSelector[0]);\n                    \n                    // Set state for dropdown\n                    this.currentDoctype = entitySelector.attr('data-doctype');\n                    this.currentDoctypeSelected = true;\n                    this.isActive = true;\n                    \n                    // Show dropdown\n                    this.showDocumentDropdown(this.currentDoctype);\n                }\n                \n                return;\n            }\n        }\n        \n        // Case: we're inside a document selector and it's empty\n        const docSelector = $(node).closest('.document-selector');\n        if (docSelector.length && docSelector.text().trim() === '') {\n            e.preventDefault();\n            this.revertToDocTypeSelection(docSelector);\n            return;\n        }\n        \n        // Case: we're inside a doctype selector and it's empty\n        const dtSelector = $(node).closest('.doctype-selector');\n        if (dtSelector.length && dtSelector.text().trim() === '') {\n            e.preventDefault();\n            this.removeEntitySelector();\n            return;\n        }\n    }\n\n    revertToDocTypeSelection(docSelector) {\n        const entitySelector = docSelector.closest('.entity-selector');\n        \n        // Remove document part\n        entitySelector.find('.document-selector').remove();\n        entitySelector.find('.entity-separator').remove();\n        \n        // Make doctype editable again\n        const doctypeSelector = entitySelector.find('.selected-doctype');\n        doctypeSelector.attr('contenteditable', 'true');\n\n        // Focus and show dropdown\n        this.focusEntityPart(doctypeSelector[0]);\n        this.hideDropdown();\n        this.showDoctypeDropdown();\n        \n        // Reset state\n        this.currentDoctypeSelected = false;\n    }\n\n    selectActiveItem() {\n        const selectedItem = this.dropdown.find('.dropdown-item.active');\n        if (selectedItem.length) {\n            const value = selectedItem.data('value');\n            const label = selectedItem.text();\n            this.selectItem(\n                {value, label}, \n                this.currentDoctypeSelected ? 'document' : 'doctype'\n            );\n        }\n    }\n    \n    createEntitySelector() {\n        // Get cursor position\n        const selection = window.getSelection();\n        if (!selection.rangeCount) return;\n\n        const range = selection.getRangeAt(0);\n        \n        // Create entity selector container\n        const entitySelector = $('<span class=\"entity-selector\"></span>');\n        \n        // Create doctype selector\n        const doctypeSelector = $('<span class=\"entity-part doctype-selector\" contenteditable=\"true\" data-placeholder=\"type...\"></span>');\n        entitySelector.append(doctypeSelector);\n        \n        // Insert at cursor position\n        range.insertNode(entitySelector[0]);\n        \n        // Focus the doctype selector\n        this.focusEntityPart(doctypeSelector[0]);\n        \n        // Set active state\n        this.isActive = true;\n        this.currentDoctypeSelected = false;\n    }\n    \n    focusEntityPart(element) {\n        // Focus and set cursor at the end of the element\n        const range = document.createRange();\n        const selection = window.getSelection();\n        \n        range.selectNodeContents(element);\n        range.collapse(false); // collapse to end\n        \n        selection.removeAllRanges();\n        selection.addRange(range);\n        \n        element.focus();\n    }\n    \n    removeEntitySelector() {\n        // Remove the entity selector if present\n        this.chatInput.find('.entity-selector').remove();\n        this.isActive = false;\n    }\n\n    showDoctypeDropdown() {\n        const me = this;\n        \n        // Fetch available doctypes\n        frappe.call({\n            method: 'gs_chat.controllers.entity_creator.get_doctype_suggestions',\n            callback: function(r) {\n                if (r.message && r.message.length) {\n                    me.createDropdown(r.message, 'doctype');\n                } else {\n                    me.isActive = false;\n                    me.removeEntitySelector();\n                    frappe.show_alert({\n                        message: __('No accessible doctypes found'),\n                        indicator: 'red'\n                    });\n                }\n            }\n        });\n    }\n\n    createDropdown(items, type) {\n        // Remove existing dropdown if any\n        this.hideDropdown();\n        \n        // Store items for filtering\n        this.dropdownItems = items;\n        \n        // Create dropdown container\n        this.dropdown = $('<div class=\"slash-command-dropdown\"></div>');\n        \n        // Add items container\n        const itemsContainer = $('<div class=\"dropdown-items\"></div>');\n        \n        // Add items\n        items.forEach((item, index) => {\n            const itemElement = $(`<div class=\"dropdown-item\" data-value=\"${item.value}\">${item.label}</div>`);\n            \n            // Highlight first item\n            if (index === 0) {\n                itemElement.addClass('active');\n            }\n            \n            // Handle item click\n            itemElement.on('click', () => {\n                this.selectItem(item, type);\n            });\n            \n            itemsContainer.append(itemElement);\n        });\n        \n        this.dropdown.append(itemsContainer);\n        \n        // Append to body with fixed positioning\n        $('body').append(this.dropdown);\n        \n        // Position dropdown\n        this.positionDropdown();\n    }\n    \n    filterDropdown(filterText) {\n        if (!this.dropdown || !this.dropdownItems) return;\n        \n        const itemsContainer = this.dropdown.find('.dropdown-items');\n        itemsContainer.empty();\n        \n        // Filter items and rebuild list\n        const filteredItems = this.dropdownItems.filter(item => \n            item.label.toLowerCase().includes(filterText)\n        );\n        \n        if (filteredItems.length === 0) {\n            itemsContainer.append('<div class=\"dropdown-item no-results\">No matches found</div>');\n            return;\n        }\n        \n        filteredItems.forEach((item, index) => {\n            const itemElement = $(`<div class=\"dropdown-item\" data-value=\"${item.value}\">${item.label}</div>`);\n            \n            // Highlight first item\n            if (index === 0) {\n                itemElement.addClass('active');\n            }\n            \n            // Handle item click\n            itemElement.on('click', () => {\n                this.selectItem(item, this.currentDoctypeSelected ? 'document' : 'doctype');\n            });\n            \n            itemsContainer.append(itemElement);\n        });\n    }\n    \n    navigateDropdown(direction) {\n        if (!this.dropdown) return;\n        \n        const items = this.dropdown.find('.dropdown-item:not(.no-results)');\n        const activeItem = this.dropdown.find('.dropdown-item.active');\n        const currentIndex = items.index(activeItem);\n        \n        let newIndex;\n        if (direction === 'next') {\n            newIndex = (currentIndex + 1) % items.length;\n        } else {\n            newIndex = (currentIndex - 1 + items.length) % items.length;\n        }\n        \n        activeItem.removeClass('active');\n        items.eq(newIndex).addClass('active');\n        this.scrollToItem(items.eq(newIndex));\n    }\n\n    positionDropdown() {\n        if (!this.dropdown) return;\n        \n        // Get position from the current entity selector\n        const entitySelector = this.chatInput.find('.entity-selector');\n        if (!entitySelector.length) {\n            this.hideDropdown();\n            return;\n        }\n        \n        const position = entitySelector.offset();\n        const entityHeight = entitySelector.outerHeight();\n        const dropdownHeight = this.dropdown.outerHeight();\n        const windowHeight = $(window).height();\n        \n        // Calculate available space below and above\n        const spaceBelow = windowHeight - (position.top - window.scrollY + entityHeight);\n        const spaceAbove = position.top - window.scrollY;\n        \n        // Decide whether to show above or below\n        const showAbove = (dropdownHeight > spaceBelow) && (spaceAbove > spaceBelow);\n        \n        // Position dropdown\n        if (showAbove) {\n            this.dropdown.css({\n                position: 'fixed',\n                bottom: windowHeight - position.top + 5,\n                left: position.left,\n                top: 'auto',\n                zIndex: 9999\n            });\n        } else {\n            this.dropdown.css({\n                position: 'fixed',\n                top: position.top + entityHeight + 5,\n                left: position.left,\n                bottom: 'auto',\n                zIndex: 9999\n            });\n        }\n    }\n\n    scrollToItem(item) {\n        const container = item.parent();\n        const containerHeight = container.height();\n        const itemTop = item.position().top;\n        const itemHeight = item.outerHeight();\n        \n        if (itemTop < 0) {\n            container.scrollTop(container.scrollTop() + itemTop);\n        } else if (itemTop + itemHeight > containerHeight) {\n            container.scrollTop(container.scrollTop() + itemTop + itemHeight - containerHeight);\n        }\n    }\n\n    selectItem(item, type) {\n        if (type === 'doctype') {\n            // Store current doctype for later\n            this.currentDoctype = item.value;\n            this.currentDoctypeSelected = true;\n            \n            // Update the current entity selector with the selected doctype\n            const entitySelector = this.chatInput.find('.entity-selector');\n            const doctypeSelector = entitySelector.find('.doctype-selector');\n            \n            // Set doctype text and make it non-editable\n            doctypeSelector.text(item.label);\n            doctypeSelector.attr('contenteditable', 'false');\n            \n            // Add slash separator\n            entitySelector.append('<span class=\"entity-separator\">/</span>');\n            \n            // Add document selector\n            const documentSelector = $('<span class=\"entity-part document-selector\" contenteditable=\"true\" data-placeholder=\"type...\"></span>');\n            entitySelector.append(documentSelector);\n            \n            // Focus the document selector\n            this.focusEntityPart(documentSelector[0]);\n            \n            // Set up input handling in the document selector\n            documentSelector.on('input', () => {\n                // Filter the dropdown based on input\n                if (this.dropdown) {\n                    const filterText = documentSelector.text().trim().toLowerCase();\n                    this.filterDropdown(filterText);\n                }\n            });\n            \n            // Show document dropdown\n            this.hideDropdown();\n            this.showDocumentDropdown(item.value);\n        } else {\n            // Update the current entity selector with the selected document\n            const entitySelector = this.chatInput.find('.entity-selector');\n            const documentSelector = entitySelector.find('.document-selector');\n            \n            // Set document text and make it non-editable\n            documentSelector.text(item.label);\n            documentSelector.attr('contenteditable', 'false');\n            \n            // Add the doctype and document information as data attributes for later retrieval\n            entitySelector.attr('data-doctype', this.currentDoctype);\n            entitySelector.attr('data-document', item.value);\n            entitySelector.addClass('complete-entity');\n\n            // Hide dropdown and reset state\n            this.hideDropdown();\n            this.isActive = false;\n\n            const spaceNode = document.createTextNode('\\u00A0'); // Non-breaking space\n            entitySelector.after(spaceNode);\n            \n            // Set cursor after entity selector\n            const selection = window.getSelection();\n            const range = document.createRange();\n            range.setStartAfter(spaceNode);\n            range.setEndAfter(spaceNode);\n            selection.removeAllRanges();\n            selection.addRange(range);\n            \n            // Focus back on main input\n            this.chatInput.focus();\n        }\n    }\n\n    showDocumentDropdown(doctype) {\n        const me = this;\n        \n        // Fetch documents for the selected doctype\n        frappe.call({\n            method: 'gs_chat.controllers.entity_creator.get_document_suggestions',\n            args: {\n                doctype: doctype,\n                partial_input: ''\n            },\n            callback: function(r) {\n                if (r.message && r.message.length) {\n                    me.createDropdown(r.message, 'document');\n                } else {\n                    me.isActive = false;\n                    frappe.show_alert({\n                        message: __('No documents found for {0}', [doctype]),\n                        indicator: 'orange'\n                    });\n                }\n            }\n        });\n    }\n\n    hideDropdown() {\n        if (this.dropdown) {\n            this.dropdown.remove();\n            this.dropdown = null;\n        }\n    }\n\n    // Method to get all entity references from the input for context creation\n    getEntityReferences() {\n        const references = [];\n        \n        this.chatInput.find('.entity-selector').each(function() {\n            const doctype = $(this).attr('data-doctype');\n            const document = $(this).attr('data-document');\n            \n            if (doctype && document) {\n                references.push({\n                    doctype: doctype,\n                    document: document\n                });\n            }\n        });\n        \n        return references;\n    }\n}", "// public/js/voice_input.js\nexport class VoiceInputManager {\n    constructor(chatInput, onResult) {\n        this.chatInput = chatInput;\n        this.onResult = onResult;\n        this.recognition = null;\n        this.isListening = false;\n        this.supportedLanguages = {\n            'en-US': 'English (US)',\n            'en-GB': 'English (UK)',\n            'es-ES': 'Spanish',\n            'fr-FR': 'French',\n            'de-DE': 'German',\n            'it-IT': 'Italian',\n            'pt-BR': 'Portuguese (Brazil)',\n            'zh-CN': 'Chinese (Mandarin)',\n            'ja-JP': 'Japanese',\n            'ko-KR': 'Korean',\n            'hi-IN': 'Hindi',\n            'ar-SA': 'Arabic',\n            'ru-RU': 'Russian'\n        };\n        this.currentLanguage = 'en-US';\n        this.initializeSpeechRecognition();\n    }\n\n    initializeSpeechRecognition() {\n        // Check browser support\n        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n        \n        if (!SpeechRecognition) {\n            console.warn('Speech recognition not supported');\n            return false;\n        }\n\n        this.recognition = new SpeechRecognition();\n        this.recognition.continuous = false;\n        this.recognition.interimResults = true;\n        this.recognition.maxAlternatives = 1;\n        this.recognition.lang = this.currentLanguage;\n\n        // Event handlers\n        this.recognition.onstart = () => {\n            this.isListening = true;\n            this.updateUI(true);\n        };\n\n        this.recognition.onend = () => {\n            this.isListening = false;\n            this.updateUI(false);\n        };\n\n        this.recognition.onresult = (event) => {\n            let finalTranscript = '';\n            let interimTranscript = '';\n\n            for (let i = event.resultIndex; i < event.results.length; i++) {\n                const transcript = event.results[i][0].transcript;\n                if (event.results[i].isFinal) {\n                    finalTranscript += transcript + ' ';\n                } else {\n                    interimTranscript += transcript;\n                }\n            }\n\n            // Update chat input with interim results\n            if (interimTranscript) {\n                this.showInterimResult(interimTranscript);\n            }\n\n            // Process final results\n            if (finalTranscript) {\n                this.processFinalResult(finalTranscript.trim());\n            }\n        };\n\n        this.recognition.onerror = (event) => {\n            console.log(event)\n            console.error('Speech recognition error:', event.error);\n            this.handleError(event.error);\n            this.isListening = false;\n            this.updateUI(false);\n        };\n\n        return true;\n    }\n\n    toggle() {\n        if (this.isListening) {\n            this.stop();\n        } else {\n            this.start();\n        }\n    }\n\n    start() {\n        if (!this.recognition) {\n            frappe.show_alert({\n                message: __('Speech recognition not supported in your browser'),\n                indicator: 'red'\n            });\n            return;\n        }\n\n        // Request microphone permission\n        navigator.mediaDevices.getUserMedia({ audio: true })\n            .then(() => {\n                this.recognition.lang = this.currentLanguage;\n                this.recognition.start();\n            })\n            .catch((err) => {\n                frappe.show_alert({\n                    message: __('Microphone access denied'),\n                    indicator: 'red'\n                });\n            });\n    }\n\n    stop() {\n        if (this.recognition && this.isListening) {\n            this.recognition.stop();\n        }\n    }\n\n    setLanguage(langCode) {\n        if (this.supportedLanguages[langCode]) {\n            this.currentLanguage = langCode;\n            // Save preference\n            localStorage.setItem('chatbot-voice-language', langCode);\n        }\n    }\n\n    showInterimResult(text) {\n        // Show interim results in a special way\n        const existingInterim = this.chatInput.find('.voice-interim');\n        if (existingInterim.length) {\n            existingInterim.text(text);\n        } else {\n            this.chatInput.append(`<span class=\"voice-interim\">${text}</span>`);\n        }\n    }\n\n    processFinalResult(text) {\n        // Remove interim display\n        this.chatInput.find('.voice-interim').remove();\n        \n        // Get current content\n        const currentText = this.chatInput.text().trim();\n        \n        // Append to existing text or replace\n        const newText = currentText ? currentText + ' ' + text : text;\n        \n        // Update chat input\n        this.chatInput.text(newText);\n        \n        // Move cursor to end\n        this.moveCursorToEnd();\n        \n        // Callback\n        if (this.onResult) {\n            this.onResult(text);\n        }\n    }\n\n    moveCursorToEnd() {\n        const range = document.createRange();\n        const selection = window.getSelection();\n        \n        range.selectNodeContents(this.chatInput[0]);\n        range.collapse(false);\n        \n        selection.removeAllRanges();\n        selection.addRange(range);\n        \n        this.chatInput[0].focus();\n    }\n\n    handleError(error) {\n        const errorMessages = {\n            'no-speech': __('No speech detected. Please try again.'),\n            'audio-capture': __('No microphone found.'),\n            'not-allowed': __('Microphone permission denied.'),\n            'network': __('Network error. Please check your connection.')\n        };\n\n        frappe.show_alert({\n            message: errorMessages[error] || __('Speech recognition error: ') + error,\n            indicator: 'red'\n        });\n    }\n\n    updateUI(isListening) {\n        const voiceButton = $('.voice-input-button');\n        if (isListening) {\n            voiceButton.addClass('listening');\n            voiceButton.find('i').removeClass('fa-microphone').addClass('fa-microphone-slash');\n        } else {\n            voiceButton.removeClass('listening');\n            voiceButton.find('i').removeClass('fa-microphone-slash').addClass('fa-microphone');\n        }\n    }\n\n    createUI() {\n        // Create voice input button\n        const voiceButton = $(`\n            <button class=\"btn btn-sm voice-input-button\" title=\"${__('Voice Input')}\">\n                <i class=\"fa fa-microphone\"></i>\n            </button>\n        `);\n\n        // Create language selector\n        const langSelector = $(`\n            <select class=\"voice-language-selector\" title=\"${__('Select Language')}\">\n                ${Object.entries(this.supportedLanguages).map(([code, name]) => \n                    `<option value=\"${code}\" ${code === this.currentLanguage ? 'selected' : ''}>${name}</option>`\n                ).join('')}\n            </select>\n        `);\n\n        // Event handlers\n        voiceButton.on('click', () => this.toggle());\n        langSelector.on('change', (e) => this.setLanguage(e.target.value));\n\n        // Load saved language preference\n        const savedLang = localStorage.getItem('chatbot-voice-language');\n        if (savedLang && this.supportedLanguages[savedLang]) {\n            this.currentLanguage = savedLang;\n            langSelector.val(savedLang);\n        }\n\n        return { voiceButton, langSelector };\n    }\n}\n\n// Integration with chat widget - Add to gs_chat.bundle.js setupEvents()\nfunction setupVoiceInput() {\n    const voiceManager = new VoiceInputManager(\n        this.chatInput,\n        (text) => {\n            // Optional: Auto-send after voice input\n            if (this.autoSendVoice && text.length > 0) {\n                setTimeout(() => this.sendMessage(), 500);\n            }\n        }\n    );\n\n    const { voiceButton, langSelector } = voiceManager.createUI();\n    \n    // Add to chat footer\n    this.chatDialog.find('.chat-footer').prepend(langSelector);\n    this.chatDialog.find('.send-button').before(voiceButton);\n    \n    // Store reference\n    this.voiceManager = voiceManager;\n}\n", "frappe.provide(\"gs_chat\");\n\nimport { SlashCommandManager } from \"./slash_commands.js\"\nimport { VoiceInputManager } from \"./voice_input.js\"\n\ngs_chat.ChatbotWidget = class {\n    constructor() {\n        this.messages = [];\n        this.isOpen = false;\n        this.slashCommands = null;\n        this.conversations = [];\n        this.currentConversationId = null;\n        this.sidebarOpen = false;\n        this.setupIcon();\n        this.fetchConversations();\n\n        this.autoSendAfterVoice = localStorage.getItem('chatbot-auto-send-voice') === 'true';\n        this.voiceShortcutEnabled = localStorage.getItem('chatbot-voice-shortcut') !== 'false';\n    }\n\n    setupIcon() {\n        const $chatbotIcon = $(`\n            <li class=\"nav-item dropdown dropdown-notifications dropdown-mobile chatbot-icon-open\">\n                <a class=\"nav-link\" data-toggle=\"dropdown\" aria-expanded=\"false\" \n                   title=\"Growth Assistant\" href=\"#\" onclick=\"return false;\">\n                    <svg class=\"icon-sm\" fill=\"var(--icon-stroke)\" stroke-width=\"0\" viewBox=\"0 0 32 32\">\n                        <path d=\"M16,19a6.9908,6.9908,0,0,1-5.833-3.1287l1.666-1.1074a5.0007,5.0007,0,0,0,8.334,0l1.666,1.1074A6.9908,6.9908,0,0,1,16,19Z\"/><path d=\"M20,8a2,2,0,1,0,2,2A1.9806,1.9806,0,0,0,20,8Z\"/><path d=\"M12,8a2,2,0,1,0,2,2A1.9806,1.9806,0,0,0,12,8Z\"/><path d=\"M17.7358,30,16,29l4-7h6a1.9966,1.9966,0,0,0,2-2V6a1.9966,1.9966,0,0,0-2-2H6A1.9966,1.9966,0,0,0,4,6V20a1.9966,1.9966,0,0,0,2,2h9v2H6a3.9993,3.9993,0,0,1-4-4V6A3.9988,3.9988,0,0,1,6,2H26a3.9988,3.9988,0,0,1,4,4V20a3.9993,3.9993,0,0,1-4,4H21.1646Z\"/>\n                    </svg>\n                </a>\n            </li>\n        `)\n        $('.dropdown-help').before($chatbotIcon);\n\n        $chatbotIcon.on('click', () => {\n            this.toggleChatbot();\n            return false;\n        });\n    }\n\n    toggleChatbot() {\n        if (this.isOpen) {\n            this.closeChat();\n        } else {\n            this.openChat();\n        }\n    }\n    \n    openChat() {\n        // Create the dialog if it doesn't exist\n        if (!this.chatDialog) {\n            this.createDialog();\n            this.setupResizeHandle();\n            this.loadSavedDimensions();\n            this.setupEvents();\n            this.renderConversationList();\n\n            // Initialize slash commands\n            this.slashCommands = new SlashCommandManager(this.chatInput);\n        }\n\n        // Show the dialog\n        this.chatDialog.addClass(\"open\");\n        this.chatDialog.removeClass(\"minimized\");\n\n        this.isOpen = true;\n\n        // Focus on input\n        this.chatInput.focus();\n\n        // Add welcome message if this is the first time and no conversation is loaded\n        if (this.messages.length === 0 && !this.currentConversationId) {\n            this.startNewConversation();\n        }\n\n        // Dispatch event that chatbot is loaded (for slash commands)\n        $(document).trigger('growth_chatbot_loaded');\n    }\n\n    createDialog() {\n        this.chatDialog = $(`\n            <div class=\"modal-content gs-chatbot-widget sidebar-hidden\">\n                <div class=\"chat-sidebar\">\n                    <div class=\"conversation-list\">\n                        <div class=\"conversation-item new-chat-item\">\n                            <div class=\"conversation-title\"><i class=\"fa fa-plus\"></i> New Chat</div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"chat-main\">\n                    <div class=\"modal-header\">\n                        <div class=\"fill-width flex title-section\">\n                            <button class=\"btn btn-sm toggle-sidebar-button\">\n                                ${frappe.utils.icon(\"list\")}\n                            </button>\n                            <span class=\"indicator hidden\"></span>\n                            <h4 class=\"modal-title\">G'Bot</h4>\n                        </div>\n                        <div class=\"modal-actions\">\n                            <button class=\"btn btn-sm action-button\" data-action=\"refresh\" title=\"Reset Conversation\">\n                                ${frappe.utils.icon(\"refresh\")}\n                            </button>\n                            <button class=\"btn btn-modal-minimize action-button btn-link\" data-action=\"minimize\" title=\"Minimize\">\n                                ${frappe.utils.icon(\"collapse\")}\n                            </button>\n                            <button class=\"btn btn-modal-close btn-link action-button\" data-action=\"close\" title=\"Close\">\n                                ${frappe.utils.icon(\"close-alt\")}\n                            </button>\n                        </div>\n                    </div>\n                    <div class=\"modal-body chat-body ui-front\">\n                        <div class=\"chatbot-messages\"></div>\n                        <div class=\"typing-indicator d-none\">\n                            <span></span><span></span><span></span>\n                        </div>\n                    </div>\n                    <div class=\"chat-footer\">\n                        <div class=\"voice-controls hidden\">\n                            <select class=\"voice-language-selector\" title=\"${__('Select Language')}\">\n                                <option value=\"en-US\">English (US)</option>\n                                <option value=\"es-ES\">Spanish</option>\n                                <option value=\"fr-FR\">French</option>\n                                <option value=\"de-DE\">German</option>\n                                <option value=\"zh-CN\">Chinese</option>\n                                <option value=\"hi-IN\">Hindi</option>\n                                <option value=\"ar-SA\">Arabic</option>\n                                <option value=\"ja-JP\">Japanese</option>\n                                <option value=\"ko-KR\">Korean</option>\n                            </select>\n                        </div>\n                        <div class=\"chat-input-container\">\n                            <span class=\"chat-input\" data-placeholder=\"Ask anything...\" contenteditable=\"true\" enterkeyhint=\"enter\" tabindex=\"0\"></span>\n                            <button class=\"hidden btn btn-sm voice-input-button\" title=\"${__('Voice Input')}\">\n                                <i class=\"fa fa-microphone\"></i>\n                            </button>\n                            <button class=\"btn btn-primary btn-sm send-button\">\n                                <i class=\"fa fa-paper-plane\"></i>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"resize-handle\"></div>\n            </div>\n            `)\n\n        $('body').append(this.chatDialog);\n    }\n\n    setupEvents() {\n        const me = this;\n\n        // Cache elements\n        this.chatBody = this.chatDialog.find('.chat-body');\n        this.messagesContainer = this.chatDialog.find('.chatbot-messages');\n        this.chatInput = this.chatDialog.find('.chat-input');\n        this.typingIndicator = this.chatDialog.find('.typing-indicator');\n        this.sendButton = this.chatDialog.find('.send-button');\n        this.conversationList = this.chatDialog.find('.conversation-list');\n        this.newChatItem = this.chatDialog.find('.new-chat-item');\n        this.toggleSidebarButton = this.chatDialog.find('.toggle-sidebar-button');\n\n        // Setup keyboard shortcut (Ctrl+Enter to send)\n        this.chatInput.on('keydown', function(e) {\n            if (e.key === 'Enter' && !e.shiftKey && !e.ctrlKey && !e.metaKey && !me.slashCommands.isActive) {\n                e.preventDefault();\n                me.sendMessage();\n                return false;\n            }\n        });\n\n        this.sendButton.on('click', function() {\n            me.sendMessage();\n        });\n\n        this.chatDialog.find('.action-button').on('click', function(e) {\n            const action = $(e.currentTarget).data('action');\n            \n            if (action === 'refresh') {\n                me.resetConversation();\n            } else if (action === 'minimize') {\n                me.minimizeChat();\n            } else if (action === 'close') {\n                me.closeChat();\n            }\n        });\n        \n        // New chat item\n        this.newChatItem.on('click', function() {\n            me.startNewConversation();\n        });\n        \n        // Toggle sidebar button\n        this.toggleSidebarButton.on('click', function() {\n            me.toggleSidebar();\n        });\n\n        this.fixPlaceholder();\n\n        this.setupVoiceInput();\n        this.setupKeyboardShortcuts();\n    }\n    \n    toggleSidebar() {\n        this.chatDialog.toggleClass('sidebar-hidden');\n        this.sidebarOpen = !this.chatDialog.hasClass('sidebar-hidden');\n        \n        // Save sidebar state\n        if (localStorage) {\n            localStorage.setItem('chatbot-sidebar-open', this.sidebarOpen ? '1' : '0');\n        }\n    }\n    \n    fetchConversations() {\n        const me = this;\n        \n        // Call API to get conversations\n        frappe.call({\n            method: 'gs_chat.controllers.chat.get_conversations',\n            callback: (r) => {\n                if (r.message && r.message.success) {\n                    me.conversations = r.message.conversations || [];\n                } else {\n                    console.error(\"Failed to fetch conversations:\", r.message);\n                }\n            }\n        });\n    }\n    \n    renderConversationList() {\n        const me = this;\n        \n        // Clear all except the new chat item\n        this.conversationList.find('.conversation-item:not(.new-chat-item)').remove();\n        \n        // Always keep the New Chat item at the top\n        if (!this.conversationList.find('.new-chat-item').length) {\n            const $newChatItem = $(`\n                <div class=\"conversation-item new-chat-item\">\n                    <div class=\"conversation-title\"><i class=\"fa fa-plus\"></i> New Chat</div>\n                </div>\n            `);\n            \n            $newChatItem.on('click', function() {\n                me.startNewConversation();\n            });\n            \n            this.conversationList.prepend($newChatItem);\n            this.newChatItem = $newChatItem;\n        }\n        \n        if (this.conversations.length === 0) {\n            this.conversationList.append(\n                `<div class=\"empty-conversation-placeholder\">No previous conversations</div>`\n            );\n            return;\n        }\n        \n        // Sort conversations by date (newest first)\n        this.conversations.sort((a, b) => {\n            return new Date(b.last_updated) - new Date(a.last_updated);\n        });\n        \n        // Create element for each conversation\n        this.conversations.forEach(conv => {\n            const formattedDate = frappe.datetime.prettyDate(conv.last_updated);\n            const title = conv.title || 'Conversation ' + frappe.datetime.str_to_user(conv.creation).slice(0, 10);\n            \n            const $item = $(`\n                <div class=\"conversation-item\" data-conversation-id=\"${conv.name}\">\n                    <div class=\"conversation-title\">${frappe.utils.escape_html(title)}</div>\n                    <div class=\"conversation-date\">${formattedDate}</div>\n                </div>\n            `);\n            \n            // Mark current conversation as active\n            if (conv.name === me.currentConversationId) {\n                $item.addClass('active');\n            }\n            \n            // Click handler\n            $item.on('click', function() {\n                const convId = $(this).data('conversation-id');\n                me.loadConversation(convId);\n                \n                // Update active state\n                me.conversationList.find('.conversation-item').removeClass('active');\n                $(this).addClass('active');\n            });\n            \n            // Insert after the new chat item\n            this.newChatItem.after($item);\n        });\n    }\n    \n    startNewConversation() {\n        // Clear chat UI\n        this.messagesContainer.empty();\n        this.messages = [];\n        \n        // Reset the conversation ID - a new one will be created when sending the first message\n        this.currentConversationId = null;\n        \n        // Mark all conversation items as inactive\n        this.conversationList.find('.conversation-item').removeClass('active');\n        \n        // Mark the new chat item as active to indicate we're in a new conversation\n        this.newChatItem.addClass('active');\n        \n        // Add welcome message\n        this.addBotMessage(\"Hello! I'm your Growth Assistant. You can ask me questions about ERP features or your data. Try typing `/` to access specific documents.\", false, false);\n        \n        // Focus on the input\n        this.chatInput.focus();\n    }\n\n    loadConversation(conversationId) {\n        const me = this;\n        \n        // Show loading indicator\n        me.chatDialog.addClass('loading-conversation');\n        \n        me.messagesContainer.html('<div class=\"text-center p-4\">Loading conversation...</div>');\n\n        // Call API to get conversation messages\n        frappe.call({\n            method: 'gs_chat.controllers.chat.get_conversation_messages',\n            args: {\n                conversation_id: conversationId\n            },\n            callback: (r) => {\n                if (r.message && r.message.success) {\n                    // Clear current messages\n                    me.messagesContainer.empty();\n                    me.messages = [];\n                    \n                    // Set current conversation ID\n                    me.currentConversationId = conversationId;\n                    \n                    // Load messages\n                    const messages = r.message.messages || [];\n                    \n                    if (messages.length === 0) {\n                        me.addBotMessage(\"This conversation is empty. You can start by asking a question.\");\n                    } else {\n                        // Add each message to UI\n                        messages.forEach(msg => {\n                            if (msg.message_type === 'user') {\n                                me.addUserMessage(msg.content, false);\n                            } else if (msg.message_type === 'bot') {\n                                me.addBotMessage(msg.content, msg.is_error, false);\n                            }\n                        });\n                    }\n                    \n                    // Scroll to bottom\n                    me.scrollToBottom();\n\n                    setTimeout(() => {\n                        me.chatDialog.removeClass('loading-conversation');\n                    }, 50);\n                } else {\n                    console.error(\"Failed to load conversation:\", r.message);\n                    me.messagesContainer.html(\n                        '<div class=\"text-center p-4 text-danger\">Failed to load conversation</div>'\n                    );\n\n                    me.chatDialog.removeClass('loading-conversation');\n                }\n            }\n        });\n    }\n\n    closeChat() {\n        if (this.chatDialog) {\n            this.chatDialog.removeClass(\"open\");\n        }\n        this.isOpen = false;\n    }\n\n    minimizeChat() {\n        this.chatDialog.toggleClass(\"minimized\");\n    }\n\n    getQueryText() {\n        // Get all text nodes and combine them with proper line breaks\n        const textParts = [];\n        const collectTextFromNode = (node) => {\n            if (node.nodeType === Node.TEXT_NODE) {\n                textParts.push(node.textContent);\n            } else if (node.nodeType === Node.ELEMENT_NODE) {\n                // For entity selector spans, use their text content\n                if (node.classList.contains('entity-selector')) {\n                    const doctype = node.getAttribute('data-doctype');\n                    const document = node.getAttribute('data-document');\n                    if (doctype && document) {\n                        textParts.push(`/${doctype}/${document}`);\n                    }\n                } \n                // For line breaks, add a newline character\n                else if (node.tagName === 'BR') {\n                    textParts.push('\\n');\n                } \n                // For paragraphs or divs, add a newline after their content\n                else if (node.tagName === 'P' || node.tagName === 'DIV') {\n                    // Recursively process children\n                    Array.from(node.childNodes).forEach(child => {\n                        collectTextFromNode(child);\n                    });\n                    // Add a newline unless this is the last paragraph\n                    if (node.nextSibling) {\n                        textParts.push('\\n');\n                    }\n                } \n                // Process other elements recursively\n                else {\n                    Array.from(node.childNodes).forEach(child => {\n                        collectTextFromNode(child);\n                    });\n                }\n            }\n        };\n\n        // Start collecting from all direct children of the chat input\n        Array.from(this.chatInput[0].childNodes).forEach(node => {\n            collectTextFromNode(node);\n        });\n\n        // Join all text parts into a single string\n        return textParts.join('');\n    }\n\n    sendMessage() {\n        // Get all text from the contenteditable div\n        const query = this.getQueryText().trim();\n\n        if (!query) {\n            return;\n        }\n\n        const references = this.slashCommands.getEntityReferences();\n\n        // Add user message to chat\n        this.addUserMessage(query, false); // Don't save to server yet\n        \n        // Clear input - for contenteditable\n        this.chatInput.html('');\n\n        // Show typing indicator\n        this.showTypingIndicator();\n        \n        // If this is potentially a new conversation, update the UI accordingly\n        let $pendingItem = null;\n        if (!this.currentConversationId) {\n            // We need to visually indicate a new conversation is being created\n            // Create a temporary pending conversation UI element\n            $pendingItem = $(`\n                <div class=\"conversation-item active\" data-conversation-id=\"pending\">\n                    <div class=\"conversation-title\"><i class=\"fa fa-circle-o-notch fa-spin\"></i> ${query.substring(0, 20)}${query.length > 20 ? '...' : ''}</div>\n                </div>\n            `);\n            \n            // Insert after the new chat button and mark new chat item as inactive\n            this.newChatItem.removeClass('active').after($pendingItem);\n        }\n        \n        // Send to server with a single endpoint that handles both new and existing conversations\n        frappe.call({\n            method: 'gs_chat.controllers.chat.process_message',\n            args: {\n                query: query,\n                references: references,\n                conversation_id: this.currentConversationId || null\n            },\n            callback: (r) => {\n                // Hide typing indicator\n                this.hideTypingIndicator();\n                \n                if (r.message && r.message.success) {\n                    // If a new conversation was created, update the ID\n                    if (r.message.conversation_id != this.currentConversationId) {\n                        this.currentConversationId = r.message.conversation_id;\n\n                        // Remove the pending item (will be replaced during refresh)\n                        if ($pendingItem) {\n                            $pendingItem.remove();\n                        }\n                        \n                        // Refresh conversation list to show the new one\n                        this.fetchConversations();\n                    }\n                    \n                    // Add bot response\n                    const messageEl = this.addBotMessage(r.message.response, false, false); // Already saved on server\n                    \n                    // Add feedback buttons\n                    this.addFeedbackButtons(messageEl, r.message.response);\n                    \n                    // Scroll to bottom\n                    this.scrollToBottom();\n                } else {\n                    // Show error message\n                    this.addBotMessage(\n                        r.message && r.message.error \n                            ? r.message.error \n                            : \"Sorry, I encountered an error. Please try again.\",\n                        true,\n                        false\n                    );\n                    \n                    // If this was a new conversation attempt, clean up\n                    if (!this.currentConversationId && $pendingItem) {\n                        $pendingItem.remove();\n                        this.newChatItem.addClass('active');\n                    }\n                }\n            },\n            error: () => {\n                // Hide typing indicator\n                this.hideTypingIndicator();\n                \n                // Show error message\n                this.addBotMessage(\n                    \"Sorry, I couldn't connect to the server. Please check your connection and try again.\",\n                    true,\n                    false\n                );\n                \n                // If this was a new conversation attempt, clean up\n                if (!this.currentConversationId && $pendingItem) {\n                    $pendingItem.remove();\n                    this.newChatItem.addClass('active');\n                }\n            }\n        });\n    }\n\n    addUserMessage(content, saveToServer = true) {\n        const messageEl = $(`\n            <div class=\"chat-message user-message\">\n                <div class=\"chat-bubble\">\n                    ${frappe.markdown(content)}\n                </div>\n            </div>\n        `);\n        \n        this.messagesContainer.append(messageEl);\n        this.scrollToBottom();\n        \n        // Add to messages array\n        this.messages.push({\n            type: 'user',\n            content: content\n        });\n        \n        // Save to server if needed and we have a conversation ID\n        if (saveToServer && this.currentConversationId) {\n            frappe.call({\n                method: 'gs_chat.controllers.chat.save_message',\n                args: {\n                    conversation_id: this.currentConversationId,\n                    message_type: 'user',\n                    content: content\n                },\n                callback: (r) => {\n                    if (!r.message || !r.message.success) {\n                        console.error(\"Failed to save user message:\", r.message);\n                    }\n                }\n            });\n        }\n    }\n\n    addBotMessage(content, isError = false, saveToServer = true) {\n        const errorClass = isError ? 'error' : '';\n        \n        const messageEl = $(`\n            <div class=\"chat-message bot-message\">\n                <div class=\"chat-bubble ${errorClass}\">\n                    ${frappe.markdown(content)}\n                </div>\n            </div>\n        `);\n        \n        this.messagesContainer.append(messageEl);\n        \n        // Add to messages array\n        this.messages.push({\n            type: 'bot',\n            content: content,\n            isError: isError\n        });\n        \n        // Save to server if needed and we have a conversation ID\n        if (saveToServer && this.currentConversationId) {\n            frappe.call({\n                method: 'gs_chat.controllers.chat.save_message',\n                args: {\n                    conversation_id: this.currentConversationId,\n                    message_type: 'bot',\n                    content: content,\n                    is_error: isError ? 1 : 0\n                },\n                callback: (r) => {\n                    if (!r.message || !r.message.success) {\n                        console.error(\"Failed to save bot message:\", r.message);\n                    }\n                }\n            });\n        }\n        \n        return messageEl;\n    }\n\n    addFeedbackButtons(messageEl, response) {\n        const feedbackEl = $(`\n            <div class=\"message-feedback\">\n                <span>${__('Was this helpful?')}</span>\n                <button class=\"btn btn-xs btn-default feedback-button\" data-feedback=\"positive\">\n                    <i class=\"fa fa-thumbs-up\"></i>\n                </button>\n                <button class=\"btn btn-xs btn-default feedback-button\" data-feedback=\"negative\">\n                    <i class=\"fa fa-thumbs-down\"></i>\n                </button>\n            </div>\n        `);\n        \n        messageEl.append(feedbackEl);\n        \n        // Handle feedback clicks\n        feedbackEl.find('.feedback-button').on('click', (e) => {\n            const feedback = $(e.currentTarget).data('feedback');\n            \n            if (feedback === 'positive') {\n                this.submitFeedback(response, 'Positive');\n                feedbackEl.html(`<span class=\"text-success\">${__('Thanks for your feedback!')}</span>`);\n            } else {\n                this.showFeedbackForm(feedbackEl, response);\n            }\n        });\n    }\n\n    showFeedbackForm(feedbackEl, response) {\n        // Use Frappe's dialog\n        const dialog = new frappe.ui.Dialog({\n            title: __('Provide Feedback'),\n            fields: [\n                {\n                    fieldname: 'feedback_comment',\n                    fieldtype: 'Small Text',\n                    label: __('What was wrong with this response?'),\n                    reqd: true\n                }\n            ],\n            primary_action_label: __('Submit'),\n            primary_action: (values) => {\n                this.submitFeedback(response, 'Negative', values.feedback_comment);\n                feedbackEl.html(`<span class=\"text-success\">${__('Thanks for your feedback!')}</span>`);\n                dialog.hide();\n            }\n        });\n        \n        dialog.show();\n    }\n\n    submitFeedback(response, feedback, comment = null) {\n        // Find the interaction ID if available\n        // For simplicity, we'll create a unique ID here\n        const interactionId = frappe.utils.get_random(10);\n        \n        frappe.call({\n            method: 'erpnext_chatbot.api.llm_interface.provide_feedback',\n            args: {\n                interaction_id: interactionId,\n                feedback: feedback,\n                comment: comment\n            },\n            callback: (r) => {\n                if (!r.message || !r.message.success) {\n                    console.error(\"Failed to submit feedback:\", r.message);\n                }\n            }\n        });\n    }\n\n    resetConversation() {\n        frappe.confirm(\n            __('This will clear your conversation history. Continue?'),\n            () => {\n                if (this.currentConversationId) {\n                    // Clear chat UI\n                    this.messagesContainer.empty();\n                    this.messages = [];\n                    \n                    // Add welcome message\n                    this.addBotMessage(\"Hello! I'm your Growth Assistant. You can ask me questions about ERP features or your data. Try typing `/` to access specific documents.\");\n    \n                    // Reset conversation on server\n                    frappe.call({\n                        method: 'gs_chat.controllers.chat.reset_conversation',\n                        args: {\n                            conversation_id: this.currentConversationId\n                        },\n                        callback: (r) => {\n                            if (r.message && r.message.success) {\n                                // Refresh conversation list\n                                this.fetchConversations();\n                            } else {\n                                console.error(\"Failed to reset conversation:\", r.message);\n                            }\n                        }\n                    });\n                } else {\n                    // If no conversation, just start a new one\n                    this.startNewConversation();\n                }\n            }\n        );\n    }\n\n    fixPlaceholder() {\n        const input = this.chatInput;\n        \n        // Function to check if content is effectively empty\n        function isEffectivelyEmpty(element) {\n            // Check if there's only whitespace or only <br> elements\n            const clone = element.clone();\n            clone.find('br').remove();\n            return clone.html().trim() === '';\n        }\n\n        // Handle input events\n        input.on('input focus blur', function() {\n            const isEmpty = isEffectivelyEmpty($(this));\n\n            $(this).toggleClass('effectively-empty', isEmpty);\n        });\n        \n        // Initial state\n        input.trigger('blur');\n    }\n\n    showTypingIndicator() {\n        this.typingIndicator.removeClass('d-none');\n    }\n\n    hideTypingIndicator() {\n        this.typingIndicator.addClass('d-none');\n    }\n\n    scrollToBottom() {\n        const messagesContainer = this.chatDialog.find('.chatbot-messages')[0];\n        if (messagesContainer) {\n            messagesContainer.scrollTop = messagesContainer.scrollHeight;\n        }\n    }\n\n    setupResizeHandle() {\n        const me = this;\n        let startX, startY, startWidth, startHeight;\n        const handle = this.chatDialog.find('.resize-handle');\n\n        handle.on('mousedown', function(e) {\n            e.preventDefault();\n            \n            // Get initial positions\n            startX = e.clientX;\n            startY = e.clientY;\n            startWidth = me.chatDialog.outerWidth();\n            startHeight = me.chatDialog.outerHeight();\n            \n            // Add event listeners for mouse movement and release\n            $(document).on('mousemove.chatbot-resize', onMouseMove);\n            $(document).on('mouseup.chatbot-resize', onMouseUp);\n        });\n        \n        function onMouseMove(e) {\n            // Calculate new dimensions\n            const newWidth = startWidth + (startX - e.clientX);\n            const newHeight = startHeight + (startY - e.clientY);\n\n            // Apply minimum size constraints\n            const width = Math.max(550, newWidth); // Minimum width 550px (increased to accommodate sidebar)\n            const height = Math.max(350, newHeight); // Minimum height 350px\n            \n            // Apply new dimensions\n            me.chatDialog.css({\n                width: width + 'px',\n                height: height + 'px'\n            });\n\n            // Store dimensions for persistence (optional)\n            if (localStorage) {\n                localStorage.setItem('chatbot-width', width);\n                localStorage.setItem('chatbot-height', height);\n            }\n            \n        }\n        \n        function onMouseUp() {\n            // Remove event listeners when done resizing\n            $(document).off('mousemove.chatbot-resize');\n            $(document).off('mouseup.chatbot-resize');\n\n            // Scroll to bottom to keep the view on new messages\n            me.scrollToBottom();\n        }\n    }\n\n    // Add method to load saved dimensions\n    loadSavedDimensions() {\n        if (localStorage) {\n            const width = localStorage.getItem('chatbot-width');\n            const height = localStorage.getItem('chatbot-height');\n            \n            if (width && height) {\n                this.chatDialog.css({\n                    width: width + 'px',\n                    height: height + 'px'\n                });\n            } else {\n                // Set default size if not saved previously (larger to accommodate sidebar)\n                this.chatDialog.css({\n                    width: '750px',\n                    height: '500px'\n                });\n            }\n            \n            // Load sidebar state\n            const sidebarOpen = localStorage.getItem('chatbot-sidebar-open');\n            if (sidebarOpen === '0') {\n                this.chatDialog.addClass('sidebar-hidden');\n                this.sidebarOpen = false;\n            } else {\n                this.sidebarOpen = true;\n            }\n        }\n    }\n\n    setupVoiceInput() {\n        const me = this;\n\n        // Initialize VoiceInputManager\n        this.voiceManager = new VoiceInputManager(\n            this.chatInput,\n            (text) => {\n                // Optional: trigger send after voice input\n                if (me.autoSendAfterVoice) {\n                    setTimeout(() => me.sendMessage(), 500);\n                }\n            }\n        );\n\n        // Get UI elements\n        const voiceButton = this.chatDialog.find('.voice-input-button');\n        const langSelector = this.chatDialog.find('.voice-language-selector');\n\n        // Setup event handlers\n        voiceButton.on('click', () => {\n            me.voiceManager.toggle();\n        });\n\n        langSelector.on('change', (e) => {\n            me.voiceManager.setLanguage(e.target.value);\n        });\n\n        // Load saved language preference\n        const savedLang = localStorage.getItem('chatbot-voice-language');\n        if (savedLang) {\n            langSelector.val(savedLang);\n            me.voiceManager.setLanguage(savedLang);\n        }\n\n        // Update UI based on listening state\n        this.voiceManager.updateUI = (isListening) => {\n            if (isListening) {\n                voiceButton.addClass('listening');\n                voiceButton.find('i').removeClass('fa-microphone').addClass('fa-microphone-slash');\n                // Show visual indicator\n                me.chatInput.addClass('voice-active');\n            } else {\n                voiceButton.removeClass('listening');\n                voiceButton.find('i').removeClass('fa-microphone-slash').addClass('fa-microphone');\n                me.chatInput.removeClass('voice-active');\n            }\n        };\n\n        // Handle voice input display\n        this.voiceManager.showInterimResult = (text) => {\n            const existingInterim = me.chatInput.find('.voice-interim');\n            if (existingInterim.length) {\n                existingInterim.text(text);\n            } else {\n                me.chatInput.append(`<span class=\"voice-interim\">${text}</span>`);\n            }\n        };\n\n        // Process final result\n        this.voiceManager.processFinalResult = (text) => {\n            // Remove interim display\n            me.chatInput.find('.voice-interim').remove();\n\n            // Get current content\n            const currentText = me.getQueryText().trim();\n\n            // Append to existing text or replace\n            if (currentText) {\n                // Add space and append\n                me.chatInput.append(document.createTextNode(' ' + text));\n            } else {\n                me.chatInput.text(text);\n            }\n\n            // Move cursor to end\n            me.voiceManager.moveCursorToEnd();\n\n            // Trigger input event for placeholder handling\n            me.chatInput.trigger('input');\n        };\n    }\n\n    toggleAutoSendVoice() {\n        this.autoSendAfterVoice = !this.autoSendAfterVoice;\n        localStorage.setItem('chatbot-auto-send-voice', this.autoSendAfterVoice);\n\n        frappe.show_alert({\n            message: this.autoSendAfterVoice ?\n            __('Auto-send after voice input enabled') :\n            __('Auto-send after voice input disabled'),\n                          indicator: 'blue'\n        });\n    }\n\n    setupKeyboardShortcuts() {\n        const me = this;\n\n        // Global keyboard shortcut for voice (Ctrl+Shift+V)\n        $(document).on('keydown', function(e) {\n            if (me.isOpen && me.voiceShortcutEnabled) {\n                // Ctrl+Shift+V for voice toggle\n                if (e.ctrlKey && e.shiftKey && e.key === 'V') {\n                    e.preventDefault();\n                    if (me.voiceManager) {\n                        me.voiceManager.toggle();\n                    }\n                }\n            }\n        });\n\n        // Escape to stop voice recording\n        this.chatInput.on('keydown', function(e) {\n            if (e.key === 'Escape' && me.voiceManager && me.voiceManager.isListening) {\n                e.preventDefault();\n                me.voiceManager.stop();\n            }\n        });\n    }\n\n    // 3. Settings menu for voice preferences\n    createVoiceSettingsMenu() {\n        const settingsButton = $(`\n        <button class=\"btn btn-xs voice-settings-btn\" title=\"${__('Voice Settings')}\">\n        <i class=\"fa fa-cog\"></i>\n        </button>\n        `);\n\n        settingsButton.on('click', () => {\n            this.showVoiceSettings();\n        });\n\n        return settingsButton;\n    }\n\n    showVoiceSettings() {\n        const dialog = new frappe.ui.Dialog({\n            title: __('Voice Input Settings'),\n                                            fields: [\n                                                {\n                                                    fieldname: 'auto_send',\n                                                    fieldtype: 'Check',\n                                                    label: __('Auto-send after voice input'),\n                                            default: this.autoSendAfterVoice ? 1 : 0\n                                                },\n                                                {\n                                                    fieldname: 'keyboard_shortcut',\n                                                    fieldtype: 'Check',\n                                                    label: __('Enable keyboard shortcut (Ctrl+Shift+V)'),\n                                            default: this.voiceShortcutEnabled ? 1 : 0\n                                                },\n                                                {\n                                                    fieldname: 'continuous_mode',\n                                                    fieldtype: 'Check',\n                                                    label: __('Continuous listening mode'),\n                                            default: 0,\n                                                description: __('Keep listening after each phrase')\n                                                }\n                                            ],\n                                            primary_action_label: __('Save'),\n                                            primary_action: (values) => {\n                                                // Save preferences\n                                                this.autoSendAfterVoice = values.auto_send;\n                                                this.voiceShortcutEnabled = values.keyboard_shortcut;\n\n                                                localStorage.setItem('chatbot-auto-send-voice', values.auto_send);\n                                                localStorage.setItem('chatbot-voice-shortcut', values.keyboard_shortcut);\n\n                                                if (this.voiceManager) {\n                                                    this.voiceManager.recognition.continuous = values.continuous_mode;\n                                                }\n\n                                                dialog.hide();\n                                                frappe.show_alert({\n                                                    message: __('Voice settings saved'),\n                                                                  indicator: 'green'\n                                                });\n                                            }\n        });\n\n        dialog.show();\n    }\n};\n\n$(document).ready(function() {\n    frappe.after_ajax(() => {\n        if (frappe.session.user == \"Administrator\")\n        gs_chat.instance = new gs_chat.ChatbotWidget();\n    });\n});\n"],
  "mappings": "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",
  "names": []
}
